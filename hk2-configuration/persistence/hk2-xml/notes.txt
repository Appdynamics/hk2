Implementation Notes:

The problem of multiple children with the same class.  Consider this interface:

@XmlRootElement(name="foobar")
public interface FooBarBean {
    @XmlElement(name="foo")
    public void setFoo(List<DataBean> foos);
    public List<DataBean> getFoo();
    
    @XmlElement(name="bar")
    public void setBar(List<DataBean> bars);
    public List<DataBean> getBar();

}

That guy has two children (foo and bar) with the same type (DataBean).  This is perfectly valid.  In order
to support this I would need some support from JAXB to tell me *which* child in the hierarchy is being
unmarshalled.  Which unfortunately I do not get from either form of unmarshalling listener (class based
or listener based).

One solution would be to generate a different proxy implementsion for each xpath.  And then I would modify
the BaseHK2JAXBBean to take a constructor that has the xpath value basically as a parameter.  While
this *would* work (and would need less explaining) it is also extremely expensive in terms of having to
generate proxy classes.  Consider something like PropertyBean, which might appear at a billion differnt
parts of the tree.  I'd need to generate a *different* proxy class for each one.  Not good.

The resolution to this problem I have come up with is that for this particular case all children
of the same parent interface *must* have a different interface.  I chose this because
a) I don't believe it is a common case
b) It does not impose TOO much of a burden on the constructor of the interface tree.

To illustrate B, it would require these changes:

public interface FooDataBean extends DataBean {}
public interface BarDataBean extends DataBean {}

@XmlRootElement(name="foobar")
public interface FooBarBean {
    @XmlElement(name="foo")
    public void setFoo(List<FooDataBean> foos);
    public List<FooDataBean> getFoo();
    
    @XmlElement(name="bar")
    public void setBar(List<BarDataBean> bars);
    public List<BarDataBean> getBar();
}

We can revisit this issue later if we find this to be too much of a restriction.